// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	entity "learning-management-system/entity"

	mock "github.com/stretchr/testify/mock"
)

// StudentRepository is an autogenerated mock type for the StudentRepository type
type StudentRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: id
func (_m *StudentRepository) Find(id uint) (*entity.Student, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *entity.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Student, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Student); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Student)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *StudentRepository) Save(_a0 *entity.Student) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Student) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStudentRepository creates a new instance of StudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudentRepository {
	mock := &StudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
